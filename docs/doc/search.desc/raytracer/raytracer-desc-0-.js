searchState.loadedDescShard("raytracer", 0, "Raytracer - Interactive 2D ray tracing simulation\nContains all global variables for the Raytracer project\nObject module declarations for the raytracer\nUser input handling for the raytracer\nConfigures the application window settings.\nApp Information (starts with the APP_ prefix)\nStandard Colors\nRaytracer Keybinds (starts with KEYB_ prefix)\nMacroquad Set Up (starts with the MACROQUAD_ prefix)\nRaytracer Object Constants (starts with the OBJC_ prefix)\nRaytracer Default Object Parameters (starts with OBJD_ …\nRaytracer Object Collection\nWindow Settings (starts with the WINDOW_ prefix)\nTraits and common behaviors for raytracer objects\nCircle object initialization and behaviors\nEmitter objects initialization and behaviors\nRay object initialization and behaviors\nUtility functions for raytracer objects\nTrait for objects that can be rendered to the screen.\nA standard isotropic light emitter\nA specialized light emitter that produces parallel rays\nTrait for objects that can be moved to a new position.\nA circular shape object (used for barriers, mirrors, etc.)\nEnum that represents all possible object types in the …\nRenders the object to the screen.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMoves the object to a new position.\nRepresents a basic circle object in the raytracer.\nFill color of the circle when rendered\nRenders the circle to the screen.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMoves the circle to a new position.\nCreates a new circle object with the specified properties.\nX-coordinate of the circle’s center position\nY-coordinate of the circle’s center position\nRadius of the circle in pixels\nRepresents a standard isotropic light emitter.\nStandard isotropic emitter that radiates light in all …\nRepresents a collimated (parallel rays) light emitter.\nDirectional emitter that produces parallel light rays\nEnumeration of all emitter types supported by the …\nThe underlying emitter providing basic functionality\nThe physical representation of the emitter (position, …\nThe width of the beam of parallel rays\nDraws the emitter on the screen.\nDraws the isotropic emitter (or the base emitter) and its …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMoves the emitter to a new position.\nMoves the emitter to a new position.\nCreates a new isotropic emitter with the given properties.\nCreates a new collimated emitter with the specified …\nThe angle (in radians) at which rays are emitted\nCollection of light rays emanating from this emitter\nRepresents a single light ray in the raytracer.\nColor of the ray when drawn\nX coordinate of the ray’s ending point\nY coordinate of the ray’s ending point\nReturns the argument unchanged.\nCreates a collection of rays arranged in a parallel …\nCreates a collection of rays arranged in an isotropic …\nCalls <code>U::from(self)</code>.\nCreates a new ray with specified parameters.\nX coordinate of the ray’s starting point\nY coordinate of the ray’s starting point\nVisual thickness of the ray when drawn\nConverts a vector (angle, start point) to a pair of points.\nUser input action handlers\nCreates and adds a new object to the scene at the current …")